---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: tkn-bundle-oci-ta
  annotations:
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/tags: image-build, konflux
  labels:
    app.kubernetes.io/version: "0.2"
    build.appstudio.redhat.com/build_type: tkn-bundle
spec:
  description: Creates and pushes a Tekton bundle containing the specified
    Tekton YAML files.
  params:
    - name: CONTEXT
      description: Path to the directory to use as context.
      type: string
      default: .
    - name: HOME
      description: Value for the HOME environment variable.
      type: string
      default: /tekton/home
    - name: IMAGE
      description: Reference of the image task will produce.
      type: string
    - name: REVISION
      description: Revision
      type: string
    - name: SOURCE_ARTIFACT
      description: The Trusted Artifact URI pointing to the artifact with
        the application source code.
      type: string
    - name: STEPS_IMAGE
      description: An optional image to configure task steps with in the bundle
      type: string
      default: ""
    - name: URL
      description: Source code Git URL
      type: string
  results:
    - name: IMAGE_DIGEST
      description: Digest of the image just built
    - name: IMAGE_REF
      description: Image reference of the built image
    - name: IMAGE_URL
      description: Image repository and tag where the built image was pushed
        with tag only
  volumes:
    - name: workdir
      emptyDir: {}
  stepTemplate:
    env:
      - name: HOME
        value: $(params.HOME)
      - name: SOURCE_CODE_DIR
        value: source
      - name: TASK_FILE
        value: tekton_task_files
    volumeMounts:
      - mountPath: /var/workdir
        name: workdir
  steps:
    - name: use-trusted-artifact
      image: quay.io/konflux-ci/build-trusted-artifacts:latest@sha256:4689f88dd253bd1feebf57f1a76a5a751880f739000719cd662bbdc76990a7fd
      args:
        - use
        - $(params.SOURCE_ARTIFACT)=/var/workdir/source
    - name: modify-task-files
      image: quay.io/konflux-ci/konflux-test:v1.4.28@sha256:4a5423e125fc28db800421422d9933290dc4b62a22401d74cd3348c03107a5d9
      workingDir: /var/workdir
      env:
        - name: CONTEXT
          value: $(params.CONTEXT)
        - name: STEPS_IMAGE
          value: $(params.STEPS_IMAGE)
      script: |
        #!/bin/env bash
        set -o errexit
        set -o pipefail
        set -o nounset

        # expand '**', and don't return glob expression when no matches found
        shopt -s globstar nullglob

        # read \$CONTEXT as an array split by comma or space into PATHS
        IFS=', ' read -r -a PATHS <<<"$CONTEXT"
        FILES=()
        for path in "${PATHS[@]}"; do
          # keeps current path expanded
          paths=()
          # are we negating the current path
          neg=0
          if [[ "${path}" == \!* ]]; then
            neg=1
            path="${path#\!}"
          fi
          if [[ -d "/var/workdir/${SOURCE_CODE_DIR}/${path}" ]]; then
            # for directories look for any .yaml or .yml files
            paths+=(
              "/var/workdir/${SOURCE_CODE_DIR}/${path}"/**/*.yaml
              "/var/workdir/${SOURCE_CODE_DIR}/${path}"/**/*.yml
            )
          else
            # for files add the file to the collected paths
            paths+=("/var/workdir/${SOURCE_CODE_DIR}/${path}")
          fi
          if [[ $neg == 0 ]]; then
            # collect current paths to FILES
            FILES+=("${paths[@]}")
          else
            if [[ ${#PATHS[@]} -eq 1 ]]; then
              # single negative path provided, first include everything then
              # subtract the negative elements
              FILES=(
                "/var/workdir/${SOURCE_CODE_DIR}"/**/*.yaml
                "/var/workdir/${SOURCE_CODE_DIR}"/**/*.yml
              )
            fi
            for p in "${paths[@]}"; do
              # remove any collected paths from FILES, leaves blank elements in place
              FILES=("${FILES[@]/$p/}")
            done
            # remove blank elements
            TMP=("${FILES[@]}")
            FILES=()
            for p in "${TMP[@]}"; do
              [[ -n "${p}" ]] && FILES+=("${p}")
            done
          fi
        done

        if [[ -n "${STEPS_IMAGE}" ]]; then
          for f in "${FILES[@]}"; do
            yq --in-place --yml-output '(.spec.steps[] | select(has("image")).image) = env.STEPS_IMAGE' "$f"
          done
        fi

        printf "%s\n" "${FILES[@]}" >"${TASK_FILE}"
    - name: build
      image: quay.io/konflux-ci/appstudio-utils@sha256:37d8a83ec1ff40445260d519faef2cedd02ca55d3eac3acb01e75ea8420bd731
      workingDir: /var/workdir
      env:
        - name: CONTEXT
          value: $(params.CONTEXT)
        - name: IMAGE
          value: $(params.IMAGE)
        - name: URL
          value: $(params.URL)
        - name: REVISION
          value: $(params.REVISION)
      script: |
        #!/bin/env bash

        set -o errexit
        set -o pipefail
        set -o nounset

        declare -r ANNOTATION_HAS_MIGRATION="dev.konflux-ci.task.has-migration"
        declare -r ANNOTATION_IS_MIGRATION="dev.konflux-ci.task.is-migration"
        declare -r ARTIFACT_TYPE_TEXT_XSHELLSCRIPT="text/x-shellscript"

        mapfile -t FILES <"${TASK_FILE}"
        [[ ${#FILES[@]} -eq 0 ]] &&
          echo "No YAML files matched by \"$CONTEXT\" in \"/var/workdir/${SOURCE_CODE_DIR}\", aborting the build" &&
          exit 1
        exec 3>&1

        function escape_tkn_bundle_arg() {
          # the arguments to `tkn bundle --annotate` need to be escaped in a curious way
          # see https://github.com/tektoncd/cli/issues/2402 for details

          local arg=$1
          # replace single double-quotes with double double-quotes (this escapes the double-quotes)
          local escaped_arg=${arg//\"/\"\"}
          # wrap the whole thing in double-quotes (this escapes commas)
          printf '"%s"' "$escaped_arg"
        }

        # Check if task is kustomized
        # A task considered to be kustomized when a kustomization file is found in the task dir
        is_kustomized_task() {
          local -r task_dir=$1
          if [[ -f "$task_dir/kustomization.yaml" || -f "$task_dir/kustomization.yml" ]]; then
            return 0
          fi
          return 1
        }

        # Generate a task from the kustomization file
        generate_kustomized_task() {
          local -r task_dir=$1
          local -r prepared_task_file="$task_dir/generated-kustomized-task.yaml"
          kubectl kustomize "$task_dir" >"$prepared_task_file"
          echo "$prepared_task_file"
        }

        # check if migration file exists in given task bundle and task_version.
        # Arguments: task_bundle, task_version, migration_file
        check_existing_migration_file() {
          local -r task_bundle=$1
          local -r task_version=$2
          local -r migration_file=$3

          # Check if task bundle has an attached migration file.
          local filename
          local found=
          local artifact_refs

          # List attached artifacts, that have specific artifact type and annotation.
          # Then, find out the migration artifact.
          #
          # Minimum version oras 1.2.0 is required for option --format
          artifact_refs=$(
            oras discover "$task_bundle" --artifact-type "$ARTIFACT_TYPE_TEXT_XSHELLSCRIPT" --format json |
              jq -r "
              .manifests[]
              | select(.annotations.\"${ANNOTATION_IS_MIGRATION}\" == \"true\")
              | .reference"
          )
          while read -r artifact_ref; do
            if [ -z "$artifact_ref" ]; then
              continue
            fi
            filename=$(
              retry oras pull --format json "$artifact_ref" | jq -r "
                .files[]
                | select(.annotations.\"org.opencontainers.image.title\" == \"${task_version}.sh\")
                | .annotations.\"org.opencontainers.image.title\"
                "
            )

            if [ -n "$filename" ]; then
              if diff "$filename" "$migration_file" >/dev/null; then
                found=true
                break
              else
                echo "error: task bundle $task_bundle has migration artifact $artifact_ref, but the migration content is different: $filename" 1>&2
                exit 1
              fi
            fi
          done <<<"$artifact_refs"

          # the same migration file exist
          if [ "$found" == "true" ]; then
            echo 1
          fi
          # migratioan file doesn't exist
          echo 0
        }

        attach_migration_file() {
          local -r task_bundle=$1
          local -r task_version=$2
          local -r migration_file=$3
          local -r auth_json=$4

          cd "${migration_file%/*}"
          retry oras attach \
            --registry-config "${auth_json}" \
            --artifact-type "$ARTIFACT_TYPE_TEXT_XSHELLSCRIPT" \
            --annotation "${ANNOTATION_IS_MIGRATION}=true" \
            "$task_bundle" "${migration_file##*/}"

          local status=$?
          if [[ $status -ne 0 ]]; then
            echo "failed to attach migration script file to $task_bundle"
            echo 1
          fi

          echo "Attached migration file $migration_file to $task_bundle"

          echo 0
        }

        # task_dir is where all the tasks definitions reside
        # all tasks definitions are in the same task_dir, so extracting it from the first element is enough
        read -r task_dir task_name task_version <<<"$(
          dirname "${FILES[0]}" |
            awk -F'/' '{ print $0, $6, $7 }'
        )"
        echo "info: build and push task $task_dir"

        # If task is kustomized, generate it and replace the FILES value with the value of the generated task
        # All other files will be ignored.
        if is_kustomized_task "$task_dir"; then
          echo "Generating a kustomized task from $task_dir"
          FILES=("$(generate_kustomized_task "$task_dir")")
        else
          echo "Task is not Kustomized - continue"
        fi

        # go to source dir and check migration script
        has_migration=false
        pushd "/var/workdir/${SOURCE_CODE_DIR}"
        migration_file="task/${task_name}/${task_version}/migrations/${task_version}.sh"
        if [ ! -d ".git" ]; then
          echo ".git folder is not found, go to correct git root directory and check it again"
          exit 1
        fi
        if [ -f "$migration_file" ] && git show "$REVISION" --oneline --name-only | grep -q "$migration_file"; then
          # There is a migration file matching the task concrete version and
          # is included in the same commit with the task.
          echo "there is an migration file ${migration_file} in revision ${REVISION}"
          has_migration=true
        fi
        popd

        ANNOTATIONS=()
        ANNOTATIONS+=("org.opencontainers.image.source=${URL}")
        ANNOTATIONS+=("org.opencontainers.image.revision=${REVISION}")
        ANNOTATIONS+=("org.opencontainers.image.url=${URL}/tree/${REVISION}/${CONTEXT}")

        # Ensure an empty string is output rather than string "null" if the version label is not present
        task_version=$(yq '.metadata.labels."app.kubernetes.io/version"' "${FILES[@]}" | sed '/null/d' | tr -d '[:space:]')
        ANNOTATIONS+=("org.opencontainers.image.version=${task_version}")

        if [ -f "${task_dir}/README.md" ]; then
          ANNOTATIONS+=("org.opencontainers.image.documentation=${URL}/tree/${REVISION}/${CONTEXT}/README.md")
        fi

        if [ -f "${task_dir}/TROUBLESHOOTING.md" ]; then
          ANNOTATIONS+=("dev.tekton.docs.troubleshooting=${URL}/tree/${REVISION}/${CONTEXT}/TROUBLESHOOTING.md")
        fi

        if [ -f "${task_dir}/USAGE.md" ]; then
          ANNOTATIONS+=("dev.tekton.docs.usage=${URL}/tree/${REVISION}/${CONTEXT}/USAGE.md")
        fi
        description=$(yq '.spec.description' "${FILES[@]}" | sed '/null/d' | tr -d '')
        ANNOTATIONS+=("org.opencontainers.image.description=${description}")

        if [ "$has_migration" == "true" ]; then
          ANNOTATIONS+=("${ANNOTATION_HAS_MIGRATION}=true")
        fi

        echo "Added annotations:"
        ANNOTATION_FLAGS=()
        for annotation in "${ANNOTATIONS[@]}"; do
          ANNOTATION_FLAGS+=("--annotate" "$(escape_tkn_bundle_arg "$annotation")")
          echo "    - $annotation"
        done

        echo "Pushing bundle ${IMAGE} to registry"
        # shellcheck disable=SC2046
        if ! OUT="$(retry tkn bundle push "${ANNOTATION_FLAGS[@]}" "$IMAGE" \
          $(printf ' -f %s' "${FILES[@]}") |
          tee /proc/self/fd/3)"; then
          echo "Failed to push bundle ${IMAGE} to registry"
          exit 1
        fi

        digest="${OUT#*Pushed Tekton Bundle to *@}"
        IMAGE_REF="${IMAGE}@${digest}"

        echo -n "$IMAGE" >"$(results.IMAGE_URL.path)"
        echo -n "${digest}" >"$(results.IMAGE_DIGEST.path)"
        echo -n "${IMAGE_REF}" >"$(results.IMAGE_REF.path)"

        if [ "$has_migration" == "true" ]; then
          migration_file="/var/workdir/${SOURCE_CODE_DIR}/${migration_file}"
          has_existing_migration_file=$(check_existing_migration_file "${IMAGE_REF}" "${task_version}" "${migration_file}")
          if [[ -z ${has_existing_migration_file} ]]; then
            echo "there is different migration script file in task bundle ${IMAGE_REF}, failed"
            exit 1
          fi

          if [[ ${has_existing_migration_file} -eq 1 ]]; then
            echo "the same migration file exists in task bundle ${IMAGE_REF}, skipped"
            exit 0
          fi

          echo "attach migration script to $IMAGE_REF"
          select-oci-auth "${IMAGE_REF}" >"${HOME}/auth.json"
          status=0
          status=$(attach_migration_file "${IMAGE_REF}" "${task_version}" "${migration_file}" "${HOME}/auth.json")
          if [ "$status" -ne 0 ]; then
            exit 1
          fi
        fi

        # cleanup task file
        [[ -f "${TASK_FILE}" ]] && rm -f "${TASK_FILE}"
      securityContext:
        runAsUser: 0
